#summary Install instructions for gtkaml on Windows

gtkaml is built using autotools and therefore the distribution comes with a './configure' script that only depends on unix utilities (so you don't have to have autotools installed - autoconf, automake etc.)

But you _do_ have to install a compatible compiler and shell.

The instructions here are based on [http://www.mingw.org/ MinGW] (minimal gcc for windows) and [http://www.mingw.org/msys.shtml MSYS] (minimal system)

===Install MinGW==
Use the [http://sourceforge.net/project/showfiles.php?group_id=2435 Automated MinGW installer] - as we speak this is [http://downloads.sourceforge.net/mingw/MinGW-5.1.4.exe?modtime=1168811236&big_mirror=1 MinGW-5.1.3.exe]. The default installation path is *C:/MinGW* but you can change it.
Do *not* install the `make` utility that comes with MinGW.

===Install MSYS==
At the moment, the base system has automatic installer only for the 1.0.10 version, found here: [http://downloads.sourceforge.net/mingw/MSYS-1.0.10.exe?modtime=1079444447&big_mirror=1 MSYS-1.0.10.exe] and as for the development toolkit, for the 1.0.1 version which is here: [http://downloads.sourceforge.net/mingw/msysDTK-1.0.1.exe?modtime=1041430674&big_mirror=1 msysDTK-1.0.1.exe]
Tell MSYS where MinGW resides (usually C:/MinGW). 
The default installation path for MSYS is *C:/msys/1.0*

Now you should already have an msys shortcut on your desktop to start the rxvt terminal and play with shell commands like `ls -l` et co.;)

===gtkaml prerequisites===
gtkaml requires gtk-2.0, which is available for download at [http://www.gtk.org/download-windows.html www.gtk.org]. 

Take your time to read about the packages, then download the _required_ packages (ticked) _and_ their *-dev* counterparts, plus `pkg-config` and `iconv` (with -dev too)

You should have a bunch of **.zip files by now (here is what you might expect currently, but please check the http://www.gtk.org site for updates):
  * [http://ftp.gnome.org/pub/gnome/binaries/win32/glib/2.16/glib-2.16.1.zip glib-2.16.1.zip]
  * [http://ftp.gnome.org/pub/gnome/binaries/win32/glib/2.16/glib-dev-2.16.1.zip glib-dev-2.16.1.zip]
  * [http://ftp.gnome.org/pub/gnome/binaries/win32/gtk+/2.12/gtk+-2.12.9.zip gtk+-2.12.9.zip]
  * [http://ftp.gnome.org/pub/gnome/binaries/win32/gtk+/2.12/gtk+-dev-2.12.9.zip gtk+-dev-2.12.9.zip]
  * [http://ftp.gnome.org/pub/gnome/binaries/win32/pango/1.20/pango-1.20.0.zip pango-1.20.0.zip]
  * [http://ftp.gnome.org/pub/gnome/binaries/win32/pango/1.20/pango-dev-1.20.0.zip pango-dev-1.20.0.zip]
  * [http://ftp.gnome.org/pub/gnome/binaries/win32/atk/1.22/atk-1.22.0.zip atk-1.22.0.zip]
  * [http://ftp.gnome.org/pub/gnome/binaries/win32/atk/1.22/atk-dev-1.22.0.zip atk-dev-1.22.0.zip]
  * [http://ftp.gnome.org/pub/gnome/binaries/win32/dependencies/cairo-1.4.14.zip cairo-1.4.14.zip]
  * [http://ftp.gnome.org/pub/gnome/binaries/win32/dependencies/cairo-dev-1.4.14.zip cairo-dev-1.4.14.zip]

And their dependencies:
  * [http://ftp.gnome.org/pub/gnome/binaries/win32/dependencies/pkg-config-0.23-2.zip pkg-config-0.23-2.zip]
  * [http://www.zlib.net/zlib123-dll.zip zlib123-dll.zip]
  * [http://www.gimp.org/~tml/gimp/win32/libiconv-1.9.1.bin.woe32.zip libiconv-1.9.1.bin.woe32.zip]
  * [http://ftp.gnome.org/pub/gnome/binaries/win32/dependencies/gettext-runtime-0.17-1.zip  gettext-runtime-0.17-1.zip]
  * [http://ftp.gnome.org/pub/gnome/binaries/win32/dependencies/gettext-runtime-dev-0.17-1.zip gettext-runtime-dev-0.17-1.zip]
  * [http://downloads.sourceforge.net/gnuwin32/libpng-1.2.8-bin.zip libpng-1.2.8-bin.zip]
  * [http://downloads.sourceforge.net/gnuwin32/libpng-1.2.8-lib.zip libpng-1.2.8-lib.zip]
  * [http://gnuwin32.sourceforge.net/downlinks/jpeg-bin-zip.php jpeg-bin.zip]
  * [http://gnuwin32.sourceforge.net/downlinks/jpeg-lib-zip.php jpeg-lib.zip]
  * [http://gnuwin32.sourceforge.net/downlinks/tiff-bin-zip.php tiff-bin.zip]
  * [http://gnuwin32.sourceforge.net/downlinks/tiff-lib-zip.php tiff-lib.zip]

Make a folder named *C:/usr* (or C:/libs or how you prefer) and unzip _all_ the files there. They usually come with sub-directories like `include`, `bin`, `share` and `lib` and they will nicely overlap just like on a UNIX `/usr` folder.

Now we will add C:/usr/bin in the *$PATH* and C:/usr/lib/pkgconfig in *$PKG_CONFIG_PATH*. To do this, enter msys and do a
{{{
$ mkdir /etc/profile.d
$ touch /etc/profile.d/gtkaml.sh
$ chmod a+x /etc/profile.d/gtkaml.sh
}}}
Now edit gtkaml.sh (you can have any other name here too) with your faVorite edItor so that its contents are:
{{{
#!/bin/sh
export PKG_CONFIG_PATH=/c/usr/lib/pkgconfig:/c/msys/lib/pkgconfig
export PATH=$PATH:/c/MinGW/libexec/gcc/mingw32/3.4.2/:/c/usr/bin
}}}
Adjust the paths if necessary - and restart msys.

(Note: to be able to run the Gtk+ programs outside msys consider adding that PATH to Windows's environment)

*Important*: from now on, make sure you configure every package with *`./configure --prefix=c:/usr`* so that it works outside of msys too (`c:/usr` is a valid windows path, but msys is able to emulate `/c/usr` which is not valid outside it). Another reason to do this is so that you _don't install executables in `c:/msys/1.0/bin`_, because msys might _fail to pass command-line arguments_ to those binaries.

Last but not least, gtkaml uses libxml2, which you can find here for windows: [http://www.zlatkovic.com/libxml.en.html], but that distribution doesn't contain the libxml2.pc required for pkg-config.

So *if you want to _compile_ gtkaml, you have to _compile libxml2_ too*. Otherwise, use binary packages for both (see below).

===Compiling libxml2, vala and gtkaml==

Download the latest version from [ftp://xmlsoft.org/libxml2/], and do the following:
{{{
$ tar xvzf /path/to/libxml2-2.7.2.tar.gz
$ cd libxml2-2.7.2
$ ./configure --prefix=c:/usr
$ make
$ make install
}}}

Download vala 0.5.2 or later (for gtkaml 0.2.2.2). Start msys and change to a folder of your choice, and type there
{{{
$ tar -xvjf /path/to/vala-0.5.x.tar.bz2
$ cd vala-0.5.x
$ ./configure --prefix=c:/usr
$ make
$ make install
}}}

The same exact steps are for compiling gtkaml 
{{{
$ tar -xvjf /path/to/gtkaml-0.2.x.x.tar.bz2
$ cd gtkaml-0.2.x.x
$ ./configure --prefix=c:/usr
$ make
$ make install
}}}

===Testing the environment===
If gtkaml compiled, it already means that vala works, and Gtk+ and libxml2 are properly installed. 

(This is because gtkaml uses libxml2, has **.vala sources and some **.gtkaml files in /tests or /examples which use Gtk+)

If you install from binary packages, try pasting the [Example example] in a file and compile it.

===Binary packages for vala and gtkaml===
Binary packages are available at the download section [http://code.google.com/p/gtkaml/downloads/list here]. Unzip them in c:/usr and you're done!

(*UPDATE*: the [http://code.google.com/p/valide/ Val(a)ide] project provides an installation kit for MinGW, Gtk+, and Vala. You would still need `msys` for binutils though)

Now you can start reading the [http://live.gnome.org/Vala/Tutorial Vala Tutorial] or try out the sample code from [http://live.gnome.org/Vala/ vala's homepage], then you can jump to the gtkaml tutorial (when it's done).