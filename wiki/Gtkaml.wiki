#summary Introduction to Gtkaml

= What is Gtkaml =

Gtkaml is an XML preprocessor that transforms an UI description into [http://live.gnome.org/Vala Vala] code.

== Example ==

http://blad.files.wordpress.com/2007/11/gtkaml1.png

=== MyWidget.gtkaml ===
Here is what you may write:
{{{
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<VBox xmlns="Gtk:gtk+-2.0">
	<Label translatable="true" use_markup="true" label="&lt;b&gt;Dialog Box Title Here&lt;/b&gt;" expand="false">
	</Label>
	<Notebook can_focus="true" tab_vborder="1">
		<Label>
			<tab_label><Label label="label for a tab" fill="FALSE"/></tab_label>
			<label>label
multilne</label>
		</Label>
		<HBox>
			<tab_label><CheckButton label="check button" active="TRUE" fill="FALSE" /></tab_label>
			<Label label="Nothing to see here, please move along" />
		</HBox>
	</Notebook>
	<HButtonBox expand="false">
		<Button has_default="true" label="_abort" click="on_click()"/>
		<Button label="gtk-redo" stock="true"/>
		<Button label="fail"/>
	</HButtonBox>
<![CDATA[
	private void on_click() { stdout.printf("you clicked me!"); }
]]>
</VBox>
}}}
and the output of

`$> gtkaml MyWidget.gtkaml`

would be:

=== MyWidget.vala ===
{{{
using GLib;
using Gtk;

public class MyWidget : VBox {

	private Label label5;
	private Notebook notebook1;
	private Label label4;
	private Label label2;
	private CheckButton check_button;
	private HBox hbox1;
	private HButtonBox hbuttonbox1;
	private Button abort;
	private Button button2;
	private Button fail;

	construct {
		label5 = new Label("<b>Dialog Box Title Here</b>");
		label5.use_markup = true;
		this.pack_start(label5, false, false, 0 );

		notebook1 = new Notebook();
		this.pack_start(notebook1, true, true, 0 );

		label4 = new Label("label\nmultiline");
		notebook1.add( label4 );

		label2 = new Label("Page 1");
		notebook1.set_tab_label( notebook1.get_nth_page(0), label2);

		hbox1 = new HBox( false, 0 );
		notebook1.add( hbox1 );

		check_button = CheckButton.with_label("check button");
		check_button.active = true;
		notebook1.set_tab_label( notebook1.get_nth_page(1), check_button );

		hbuttonbox1 = new HButtonBox();
		this.pack_start( hbuttonbox1, false, true, 0 );

		abort = Button.with_mnemonic("_abort");
		abort.can_default = true;
		abort.clicked += target => { on_click(); }; 
		hbuttonbox1.add( abort );

		button2 = Button.from_stock("gtk-redo");
		button2.can_default = true;
		hbuttonbox1.add( button2 );

		fail = Button.with_mnemonic("fail");
		fail.can_default = true;
		hbuttonbox1.add( fail );
	}
	
	private void on_click() { stdout.printf("you clicked me!"); }
}
}}}

== Why? ==

Beacause vala further transforms the source into .c and .h and gcc compiles them (of course) to native code;)