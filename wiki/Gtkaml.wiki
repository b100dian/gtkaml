#summary Introduction to Gtkaml
#labels Featured,Phase-Design

= What is gtkaml =

Gtkaml is an XML syntax + a preprocessor that transforms an UI description into [http://live.gnome.org/Vala Vala] code.

== Example of gtkaml syntax ==

Which would produce this:

http://blad.files.wordpress.com/2007/11/gtkaml1.png

=== MyVBox.gtkaml ===
Here is what you may write:
{{{
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<VBox xmlns="Gtk" xmlns:glib="GLib" xmlns:class="http://gtkaml.org/0.1" class:name="MyVBox">
	<Label pack_start="true" use_markup="true" label="&lt;b&gt;Dialog Box Title Here&lt;/b&gt;" expand="false" fill="false" padding="0" />
	
	<Notebook can_focus="true" tab_vborder="1">
		<Label>
			<tab_label><Label label="label for a tab"/></tab_label>
			<label>label
multilne</label>
		</Label>
		<HBox homogeneous="false" spacing="0">
			<tab_label><CheckButton label="check button" active="true" /></tab_label>
			<Label label="Nothing to see here, please move along" />
		</HBox>
	</Notebook>
	<HButtonBox>
		<Button with_mnemonic="true" has_default="true" label="_abort" clicked="on_click()"/>
		<Button label="gtk-redo" use_stock="true"/>
		<Button label="fail"/>
	</HButtonBox>
<![CDATA[
	private void on_click() { stdout.printf("you clicked me!"); }

	static int main (string[] args) 
	{
		Gtk.init (ref args);
		Window w = new Gtk.Window (WindowType.TOPLEVEL);
		MyVBox v = new MyVBox ();
		w.add (v);
		w.show_all ();
		Gtk.main ();
		return 0;
	}
		
]]>
</VBox>
}}}
and the output of

`$ gtkamlc --pkg gtk+2.0 MyVBox.gtkaml -o myvbox `

would be:

=== MyVBox.vala ===
{{{
using Gtk;
using GLib;

public class MyVBox : Gtk.VBox
{
	private void on_click() { stdout.printf("you clicked me!"); }

	static int main (string[] args) 
	{
		Gtk.init (ref args);
		Window w = new Gtk.Window (WindowType.TOPLEVEL);
		MyVBox v = new MyVBox ();
		w.add (v);
		w.show_all ();
		Gtk.main ();
		return 0;
	}

	construct {
		Gtk.Label _label0;
		Gtk.Notebook _notebook0;
		Gtk.Label _label1;
		Gtk.Label _label2;
		Gtk.HBox _hbox0;
		Gtk.CheckButton _checkbutton0;
		Gtk.Label _label3;
		Gtk.HButtonBox _hbuttonbox0;
		Gtk.Button _button0;
		Gtk.Button _button1;
		Gtk.Button _button2;

		_label0 = new Gtk.Label ("<b>Dialog Box Title Here</b>");
		_notebook0 = new Gtk.Notebook ();
		_label2 = new Gtk.Label ("label for a tab");
		_label1 = new Gtk.Label ("label\nmultilne");
		_checkbutton0 = new Gtk.CheckButton.with_label ("check button");
		_hbox0 = new Gtk.HBox (false, 0);
		_label3 = new Gtk.Label ("Nothing to see here, please move along");
		_hbuttonbox0 = new Gtk.HButtonBox ();
		_button0 = new Gtk.Button.with_mnemonic ("_abort");
		_button1 = new Gtk.Button.with_label ("gtk-redo");
		_button2 = new Gtk.Button.with_label ("fail");

		this.name = "MyVBox";
		_label0.use_markup = true;
		this.pack_start (_label0, false, false, 0);

		_notebook0.can_focus = true;
		_notebook0.tab_vborder = 1;
		this.pack_start_defaults (_notebook0);

		_notebook0.append_page (_label1, _label2);

		_checkbutton0.active = true;
		_notebook0.append_page (_hbox0, _checkbutton0);

		_hbox0.pack_start_defaults (_label3);

		this.pack_start_defaults (_hbuttonbox0);

		_button0.has_default = true;
		_button0.clicked += target => { on_click(); };
		_hbuttonbox0.pack_start_defaults (_button0);

		_button1.use_stock = true;
		_hbuttonbox0.pack_start_defaults (_button1);

		_hbuttonbox0.pack_start_defaults (_button2);
	}
}
}}}

== Why? ==

Beacause vala further transforms the source into .c and .h and gcc compiles them (of course) to native code;)