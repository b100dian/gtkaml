#summary gtkaml design goals
#labels Featured

  * the gtkaml XML tags correspond to existing GObject classes(DONE in 0.1), and their attributes correspond to GObject properties, signals or fields(DONE in 0.1)

  * the XML namespace URI includes the Vala namespace name(DONE in 0.1) followed by a colon (':') and the Vala pkg name (optional). The namespace you're creating can be specified in `gtkaml:namespace` attribute (DONE in 0.1):

{{{
<Gtkns.Window xmlns:Gtkns="Gtk:gtk+-2.0" xmlns:GLibns="GLib" xmlns:gtkaml="http://gtkaml.org/0.1" gtkaml:namespace="myNamespace" gtkaml:name="MyWindow">
...
</Gtkns.Window>
}}}
  * the gtkaml namespace name may be changed as long as its URI begins with `http://gtkaml.org` (DONE in 0.1)

  * the root tag represents the class that you're extending(DONE in 0.1), and the `gtkaml:name` represents the name of the class you're creating(DONE in 0.1):

{{{
using Gtk;
using GLib;
namespace myNamespace {
   public class MyWindow : Gtk.Window { ... } 
}
}}}
  * the other tags are declared as locals in the `construct` method (DONE in 0.1) and code is generated so that their properties are set(DONE in 0.1) and they are added to the parent container(DONE in 0.1)

{{{
<Window xmlns="Gtk:gtk+-2.0" xmlns:GLibns="GLib" title="gtkaml window">
    <Label label="test" />
</Window>
}}}
generates:
{{{
   private Gtk.Label label1;
   construct {
       this.title = "gtkaml window";
       label1 = new Gtk.Label();
       label1.label = "test";
       this.add(label1);
   }
}}}
  * the `gtkaml:public` and `gtkaml:private` attributes can set a name and visibility of a tag and declare it as a class member(DONE in 0.1):

{{{
<Window xmlns="Gtk:gtk+-2.0" xmlns:GLibns="GLib" title="gtkaml window">
    <Label gtkaml:public="myLabel" label="test" />
</Window>
}}}
generates:
{{{
   public Gtk.Label myLabel;
   construct {
       this.title = "gtkaml window";
       myLabel = new Gtk.Label();
       myLabel.label = "test";
       this.add(myLabel);
   }
}}}
  * attributes can be specified as sub-tags too (e.g. for multiline values or complex literals like array ones) (DONE in 0.1)

{{{
    <Label gtkaml:public="myLabel" >
         <label>multiline 
label</label>
    </Label>
}}}

  * code can be written in CDATA sections of the root tag(DONE in 0.1)

{{{
<Window xmlns="Gtk:gtk+-2.0" xmlns:GLibns="GLib">
   <![CDATA[
   private function on_click() { 
      stdout.printf("clicked!\n"); 
   } ]]>
</Window>
}}}
  * signals are properties holding code as their value (e.g. a function call). The parameters are `target`(the emmiter) and the other parameters from the signal signature, with the same names(DONE in 0.1)

{{{
<Window xmlns="Gtk:gtk+-2.0" xmlns:GLibns="GLib">
   <Label gtkaml:public="myLabel" label="test" clicked="on_click()"/>   
   <![CDATA[
   private function on_click() { 
      stdout.printf("clicked!\n"); 
   } ]]>
</Window>
}}}
  * attributes that are not literals can be specified with {} surrounding an identifier or expression (DONE in 0.1)

{{{
   <string gtkaml:public="myString">There is no spoon</string>
   <Label gtkaml:public="myLabel" label="{myString}"/>
}}}   
  * signals can be written in between {} too - this way you have to specify yourself the lambda function (DONE in 0.1):

{{{
<Window xmlns="Gtk:gtk+-2.0" xmlns:GLibns="GLib">
   <Label gtkaml:public="myLabel" label="test" clicked="{target=>{on_click()}}"/>   
   ...
}}}

  * constructors are automatically determined based on the attributes present. If you want to use a specific constructor, specify his name as an attribute with the value "true" (DONE in 0.1):

{{{
   <Label with_mnemonic="true" label="_Shortcut"/>
}}}
  * the functions used to add child widgets to containers are automatically detected. If you want to use a specific container add function, specify his name as an attribut with the value "true" (DONE in 0.1:

{{{
   <VBox homogeneous="true" spacing="0">
       <Label pack_end="true" label="packed at end" />
   </VBox>
}}}