#summary gtkaml design goals
#labels Featured

  * The gtkaml XML tags correspond to existing GObject classes(DONE), and their attributes correspond to GObject properties, signals or fields(DONE)

  * The namespace definition includes the Vala namespace name followed by a colon (':') and the Vala pkg name (optional). The namespace you're creating can be specified in `gtkaml:namespace` attribute:

{{{
<Gtkns.Window xmlns:Gtkns="Gtk:gtk+-2.0" xmlns:GLibns="GLib" gtkaml:namespace="myNamespace">
...
</Gtkns.Window>
}}}
  * The root gtkaml tag represents the class that you're extending(DONE), and the name of the processed file represents the class you're creating:

{{{
using Gtk;
using GLib;
namespace myNamespace {
   public class FileName : Gtk.Window { ... } 
}
}}}
  * The other gtkaml tags are declared as class members(DONE) and code is generated in the `construct` method so that their properties are set(DONE) and they are added to the parent container(partially DONE)

{{{
<Window xmlns="Gtk:gtk+-2.0" xmlns:GLibns="GLib" title="gtkaml window">
    <Label label="test" />
</Window>
}}}
generates:
{{{
   private Gtk.Label label1;
   construct {
       this.title = "gtkaml window";
       label1 = new Gtk.Label();
       label1.label = "test";
       this.add(label1);
   }
}}}
  * The `gtkaml:public` and `gtkaml:private` attributes can change the name and visibility of the data member(DONE):

{{{
<Window xmlns="Gtk:gtk+-2.0" xmlns:GLibns="GLib" title="gtkaml window">
    <Label gtkaml:public="myLabel" label="test" />
</Window>
}}}
generates:
{{{
   public Gtk.Label myLabel;
   construct {
       this.title = "gtkaml window";
       myLabel = new Gtk.Label();
       myLabel.label = "test";
       this.add(myLabel);
   }
}}}
  * attributes can be specified as sub-tags too (e.g. for multiline values or complex literals like array ones)

{{{
    <Label gtkaml:public="myLabel" >
         <label>multiline 
label</label>
    </Label>
}}}
  * code can be written in CDATA sections of the root tag(DONE)

{{{
<Window xmlns="Gtk:gtk+-2.0" xmlns:GLibns="GLib">
   <![CDATA[
   private function on_click() { 
      stdout.printf("clicked!\n"); 
   } ]]>
</Window>
}}}
  * signals are properties holding code as their value (e.g. a function call)(DONE)

{{{
<Window xmlns="Gtk:gtk+-2.0" xmlns:GLibns="GLib">
   <Label gtkaml:public="myLabel" label="test" clicked="on_click()"/>   
   <![CDATA[
   private function on_click() { 
      stdout.printf("clicked!\n"); 
   } ]]>
</Window>
}}}
  * attributes that are not literals can be specified with {} surrounding an identifier(DONE: string and boolean literals, and {} for the others)

{{{
   <string gtkaml:public="myString">There is no spoon</string>
   <Label gtkaml:public="myLabel" label="{myString}"/>
}}}   